{"version":3,"sources":["components/NoteButton.js","components/NotePage.js","components/NotesMain.js","serviceWorker.js","index.js"],"names":["NoteButton","props","react_default","a","createElement","className","pageType","onClick","toggleDisplayNotes","NotePage","rows","type","placeholder","NotesMain","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","displayNotes","bind","assertThisInitialized","_this2","setState","components_NoteButton","components_NotePage","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_NotesMain","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SA4BeA,eAzBI,SAACC,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAGY,QAAnBJ,EAAMK,UAENJ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,yBAAyBE,QAASN,EAAMO,oBACtDN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,KAAd,MAOe,UAAnBJ,EAAMK,UACNJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BCCZI,SAjBE,SAACR,GAChB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,YAAUM,KAAK,IAAIL,UAAU,IAAIM,KAAK,OAAOC,YAAY,8BAI3DV,EAAAC,EAAAC,cAAA,UAAQC,UAAW,wBAAnB,WCkDSQ,cAxDb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAM,CACTC,cAAe,GAGjBR,EAAKN,mBAAqBM,EAAKN,mBAAmBe,KAAxBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAPjBA,oFAUO,IAAAW,EAAAR,KAClBA,KAAKS,SAAS,iBAAO,CAACJ,cAAgBG,EAAKJ,MAAMC,iDAKjD,OACEpB,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,cAEEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,KACbH,EAAAC,EAAAC,cAAA,oBAGFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,KACbH,EAAAC,EAAAC,cAACuB,EAAD,CACEnB,mBAAoBS,KAAKT,mBACzBF,SAAU,WAObW,KAAKI,MAAMC,cACZpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAACuB,EAAD,CAAYrB,SAAU,WAKxBW,KAAKI,MAAMC,cAEXpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACwB,EAAD,eA9CYC,aCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAAeC,SAASC,eAAe,SD2HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f7ec9bd9.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../styles/NoteButton.css'\r\n\r\nconst NoteButton = (props) => {\r\n  return (\r\n    <div className=\"container\">\r\n\r\n        {\r\n            props.pageType === 'new' &&\r\n\r\n            <button className=\"btn btn-primary btn-lg\" onClick={props.toggleDisplayNotes}>\r\n                <h3 className=\"a\">\r\n                    +\r\n                </h3>\r\n            </button>\r\n        }\r\n\r\n        {\r\n            props.pageType === 'saved' &&\r\n            <div className=\"note-sample-display\">\r\n                {/* Should get title and note sample from somewhere maybe backend */}\r\n            </div>\r\n        }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NoteButton\r\n","import React from 'react'\r\nimport '../styles/NotePage.css'\r\n\r\nconst NotePage = (props) => {\r\n  return (\r\n    <div className=\"page-container\">\r\n\r\n      <div className=\"input-field\">\r\n        <textarea rows=\"8\" className=\"a\" type=\"text\" placeholder=\"Write your notes here...\">\r\n        </textarea>\r\n      </div>\r\n\r\n      <button className =\"save btn btn-success\">\r\n            Save\r\n        </button>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NotePage\r\n","import React, { Component } from 'react';\nimport '../styles/NotesMain.css';\nimport NoteButton from './NoteButton';\nimport NotePage from './NotePage';\n\nclass NotesMain extends Component {\n  constructor(){\n      super()\n\n      this.state={\n        displayNotes : false,\n      }\n\n      this.toggleDisplayNotes = this.toggleDisplayNotes.bind(this)\n  }\n\n  toggleDisplayNotes(){\n    this.setState(() => ({displayNotes : !this.state.displayNotes}))\n  }\n\n\n  render() {\n    return (\n      <div>\n\n        <header>\n\n          <div className=\"a\">\n            <h3>Notes</h3>\n          </div>\n\n          <div className=\"b\">\n            <NoteButton \n              toggleDisplayNotes={this.toggleDisplayNotes}\n              pageType={'new'}\n            />\n          </div>\n\n        </header>\n\n        {\n          !this.state.displayNotes &&\n          <div className=\"note-button-saved\">\n            <NoteButton pageType={'saved'} />\n          </div>\n        }\n\n        {\n          this.state.displayNotes &&\n\n          <div className=\"note-page\">\n            <NotePage />\n          </div>\n\n\n        }\n\n      </div>\n    );\n  }\n}\n\nexport default NotesMain;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport NotesMain from './components/NotesMain';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<NotesMain />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}