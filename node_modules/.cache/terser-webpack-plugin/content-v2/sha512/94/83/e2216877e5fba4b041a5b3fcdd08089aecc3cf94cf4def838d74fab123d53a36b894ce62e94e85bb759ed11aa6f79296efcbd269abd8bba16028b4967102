{"map":"{\"version\":3,\"sources\":[\"C:\\\\Users\\\\Alex\\\\Documents\\\\Web Projects\\\\anywhere-notes-react\\\\anywhere-notes\\\\src\\\\components\\\\NoteButton.js\",\"C:\\\\Users\\\\Alex\\\\Documents\\\\Web Projects\\\\anywhere-notes-react\\\\anywhere-notes\\\\src\\\\components\\\\NotePage.js\",\"C:\\\\Users\\\\Alex\\\\Documents\\\\Web Projects\\\\anywhere-notes-react\\\\anywhere-notes\\\\src\\\\components\\\\NotesMain.js\",\"C:\\\\Users\\\\Alex\\\\Documents\\\\Web Projects\\\\anywhere-notes-react\\\\anywhere-notes\\\\src\\\\serviceWorker.js\",\"C:\\\\Users\\\\Alex\\\\Documents\\\\Web Projects\\\\anywhere-notes-react\\\\anywhere-notes\\\\src\\\\index.js\"],\"names\":[\"NoteButton\",\"props\",\"react_default\",\"a\",\"createElement\",\"className\",\"pageType\",\"onClick\",\"toggleDisplayNotes\",\"NotePage\",\"rows\",\"type\",\"placeholder\",\"NotesMain\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"displayNotes\",\"bind\",\"assertThisInitialized\",\"_this2\",\"setState\",\"components_NoteButton\",\"components_NotePage\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"components_NotesMain\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"0SA4BeA,eAzBI,SAACC,GAClB,OACEC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,aAGY,QAAnBJ,EAAMK,UAENJ,EAAAC,EAAAC,cAAA,SAAA,CAAQC,UAAU,yBAAyBE,QAASN,EAAMO,oBACtDN,EAAAC,EAAAC,cAAA,KAAA,CAAIC,UAAU,KAAd,MAOe,UAAnBJ,EAAMK,UACNJ,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,2BCCZI,SAjBE,SAACR,GAChB,OACEC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,kBAEbH,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,WAAA,CAAUM,KAAK,IAAIL,UAAU,IAAIM,KAAK,OAAOC,YAAY,8BAI3DV,EAAAC,EAAAC,cAAA,SAAA,CAAQC,UAAW,wBAAnB,WCkDSQ,cAxDb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAM,CACTC,cAAe,GAGjBR,EAAKN,mBAAqBM,EAAKN,mBAAmBe,KAAxBR,OAAAS,EAAA,EAAAT,CAAAA,OAAAS,EAAA,EAAAT,CAAAD,KAPjBA,oFAUO,IAAAW,EAAAR,KAClBA,KAAKS,SAAS,WAAA,MAAO,CAACJ,cAAgBG,EAAKJ,MAAMC,iDAKjD,OACEpB,EAAAC,EAAAC,cAAA,MAAA,KAEEF,EAAAC,EAAAC,cAAA,SAAA,KAEEF,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,KACbH,EAAAC,EAAAC,cAAA,KAAA,KAAA,UAGFF,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,KACbH,EAAAC,EAAAC,cAACuB,EAAD,CACEnB,mBAAoBS,KAAKT,mBACzBF,SAAU,WAObW,KAAKI,MAAMC,cACZpB,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAACuB,EAAD,CAAYrB,SAAU,WAKxBW,KAAKI,MAAMC,cAEXpB,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACwB,EAAD,eA9CYC,EAAAA,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAAeC,SAASC,eAAe,SD2HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React from 'react'\\r\\nimport '../styles/NoteButton.css'\\r\\n\\r\\nconst NoteButton = (props) => {\\r\\n  return (\\r\\n    <div className=\\\"container\\\">\\r\\n\\r\\n        {\\r\\n            props.pageType === 'new' &&\\r\\n\\r\\n            <button className=\\\"btn btn-primary btn-lg\\\" onClick={props.toggleDisplayNotes}>\\r\\n                <h3 className=\\\"a\\\">\\r\\n                    +\\r\\n                </h3>\\r\\n            </button>\\r\\n        }\\r\\n\\r\\n        {\\r\\n            props.pageType === 'saved' &&\\r\\n            <div className=\\\"note-sample-display\\\">\\r\\n                {/* Should get title and note sample from somewhere maybe backend */}\\r\\n            </div>\\r\\n        }\\r\\n\\r\\n    </div>\\r\\n  )\\r\\n}\\r\\n\\r\\nexport default NoteButton\\r\\n\",\"import React from 'react'\\r\\nimport '../styles/NotePage.css'\\r\\n\\r\\nconst NotePage = (props) => {\\r\\n  return (\\r\\n    <div className=\\\"page-container\\\">\\r\\n\\r\\n      <div className=\\\"input-field\\\">\\r\\n        <textarea rows=\\\"8\\\" className=\\\"a\\\" type=\\\"text\\\" placeholder=\\\"Write your notes here...\\\">\\r\\n        </textarea>\\r\\n      </div>\\r\\n\\r\\n      <button className =\\\"save btn btn-success\\\">\\r\\n            Save\\r\\n        </button>\\r\\n\\r\\n    </div>\\r\\n  )\\r\\n}\\r\\n\\r\\nexport default NotePage\\r\\n\",\"import React, { Component } from 'react';\\r\\nimport '../styles/NotesMain.css';\\r\\nimport NoteButton from './NoteButton';\\r\\nimport NotePage from './NotePage';\\r\\n\\r\\nclass NotesMain extends Component {\\r\\n  constructor(){\\r\\n      super()\\r\\n\\r\\n      this.state={\\r\\n        displayNotes : false,\\r\\n      }\\r\\n\\r\\n      this.toggleDisplayNotes = this.toggleDisplayNotes.bind(this)\\r\\n  }\\r\\n\\r\\n  toggleDisplayNotes(){\\r\\n    this.setState(() => ({displayNotes : !this.state.displayNotes}))\\r\\n  }\\r\\n\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <div>\\r\\n\\r\\n        <header>\\r\\n\\r\\n          <div className=\\\"a\\\">\\r\\n            <h3>Notes</h3>\\r\\n          </div>\\r\\n\\r\\n          <div className=\\\"b\\\">\\r\\n            <NoteButton \\r\\n              toggleDisplayNotes={this.toggleDisplayNotes}\\r\\n              pageType={'new'}\\r\\n            />\\r\\n          </div>\\r\\n\\r\\n        </header>\\r\\n\\r\\n        {\\r\\n          !this.state.displayNotes &&\\r\\n          <div className=\\\"note-button-saved\\\">\\r\\n            <NoteButton pageType={'saved'} />\\r\\n          </div>\\r\\n        }\\r\\n\\r\\n        {\\r\\n          this.state.displayNotes &&\\r\\n\\r\\n          <div className=\\\"note-page\\\">\\r\\n            <NotePage />\\r\\n          </div>\\r\\n\\r\\n\\r\\n        }\\r\\n\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default NotesMain;\\r\\n\",\"// This optional code is used to register a service worker.\\r\\n// register() is not called by default.\\r\\n\\r\\n// This lets the app load faster on subsequent visits in production, and gives\\r\\n// it offline capabilities. However, it also means that developers (and users)\\r\\n// will only see deployed updates on subsequent visits to a page, after all the\\r\\n// existing tabs open on the page have been closed, since previously cached\\r\\n// resources are updated in the background.\\r\\n\\r\\n// To learn more about the benefits of this model and instructions on how to\\r\\n// opt-in, read http://bit.ly/CRA-PWA\\r\\n\\r\\nconst isLocalhost = Boolean(\\r\\n  window.location.hostname === 'localhost' ||\\r\\n    // [::1] is the IPv6 localhost address.\\r\\n    window.location.hostname === '[::1]' ||\\r\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\r\\n    window.location.hostname.match(\\r\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\r\\n    )\\r\\n);\\r\\n\\r\\nexport function register(config) {\\r\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\r\\n    // The URL constructor is available in all browsers that support SW.\\r\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\r\\n    if (publicUrl.origin !== window.location.origin) {\\r\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\r\\n      // from what our page is served on. This might happen if a CDN is used to\\r\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    window.addEventListener('load', () => {\\r\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\r\\n\\r\\n      if (isLocalhost) {\\r\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\r\\n        checkValidServiceWorker(swUrl, config);\\r\\n\\r\\n        // Add some additional logging to localhost, pointing developers to the\\r\\n        // service worker/PWA documentation.\\r\\n        navigator.serviceWorker.ready.then(() => {\\r\\n          console.log(\\r\\n            'This web app is being served cache-first by a service ' +\\r\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\r\\n          );\\r\\n        });\\r\\n      } else {\\r\\n        // Is not localhost. Just register service worker\\r\\n        registerValidSW(swUrl, config);\\r\\n      }\\r\\n    });\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction registerValidSW(swUrl, config) {\\r\\n  navigator.serviceWorker\\r\\n    .register(swUrl)\\r\\n    .then(registration => {\\r\\n      registration.onupdatefound = () => {\\r\\n        const installingWorker = registration.installing;\\r\\n        if (installingWorker == null) {\\r\\n          return;\\r\\n        }\\r\\n        installingWorker.onstatechange = () => {\\r\\n          if (installingWorker.state === 'installed') {\\r\\n            if (navigator.serviceWorker.controller) {\\r\\n              // At this point, the updated precached content has been fetched,\\r\\n              // but the previous service worker will still serve the older\\r\\n              // content until all client tabs are closed.\\r\\n              console.log(\\r\\n                'New content is available and will be used when all ' +\\r\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\r\\n              );\\r\\n\\r\\n              // Execute callback\\r\\n              if (config && config.onUpdate) {\\r\\n                config.onUpdate(registration);\\r\\n              }\\r\\n            } else {\\r\\n              // At this point, everything has been precached.\\r\\n              // It's the perfect time to display a\\r\\n              // \\\"Content is cached for offline use.\\\" message.\\r\\n              console.log('Content is cached for offline use.');\\r\\n\\r\\n              // Execute callback\\r\\n              if (config && config.onSuccess) {\\r\\n                config.onSuccess(registration);\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n        };\\r\\n      };\\r\\n    })\\r\\n    .catch(error => {\\r\\n      console.error('Error during service worker registration:', error);\\r\\n    });\\r\\n}\\r\\n\\r\\nfunction checkValidServiceWorker(swUrl, config) {\\r\\n  // Check if the service worker can be found. If it can't reload the page.\\r\\n  fetch(swUrl)\\r\\n    .then(response => {\\r\\n      // Ensure service worker exists, and that we really are getting a JS file.\\r\\n      const contentType = response.headers.get('content-type');\\r\\n      if (\\r\\n        response.status === 404 ||\\r\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\r\\n      ) {\\r\\n        // No service worker found. Probably a different app. Reload the page.\\r\\n        navigator.serviceWorker.ready.then(registration => {\\r\\n          registration.unregister().then(() => {\\r\\n            window.location.reload();\\r\\n          });\\r\\n        });\\r\\n      } else {\\r\\n        // Service worker found. Proceed as normal.\\r\\n        registerValidSW(swUrl, config);\\r\\n      }\\r\\n    })\\r\\n    .catch(() => {\\r\\n      console.log(\\r\\n        'No internet connection found. App is running in offline mode.'\\r\\n      );\\r\\n    });\\r\\n}\\r\\n\\r\\nexport function unregister() {\\r\\n  if ('serviceWorker' in navigator) {\\r\\n    navigator.serviceWorker.ready.then(registration => {\\r\\n      registration.unregister();\\r\\n    });\\r\\n  }\\r\\n}\\r\\n\",\"import React from 'react';\\r\\nimport ReactDOM from 'react-dom';\\r\\nimport './index.css';\\r\\nimport NotesMain from './components/NotesMain';\\r\\nimport * as serviceWorker from './serviceWorker';\\r\\n\\r\\nReactDOM.render(<NotesMain />, document.getElementById('root'));\\r\\n\\r\\n// If you want your app to work offline and load faster, you can change\\r\\n// unregister() to register() below. Note this comes with some pitfalls.\\r\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\r\\nserviceWorker.unregister();\\r\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,,,,,,,,,function(e,t,a){e.exports=a(19)},,,,,,function(e,t,a){},function(e,t,a){},function(e,t,a){},function(e,t,a){},function(e,t,a){\"use strict\";a.r(t);var n=a(0),s=a.n(n),l=a(3),o=a.n(l),c=(a(15),a(4)),i=a(5),r=a(7),m=a(6),u=a(8),p=a(1),d=(a(16),a(17),function(e){return s.a.createElement(\"div\",{className:\"container\"},\"new\"===e.pageType&&s.a.createElement(\"button\",{className:\"btn btn-primary btn-lg\",onClick:e.toggleDisplayNotes},s.a.createElement(\"h3\",{className:\"a\"},\"+\")),\"saved\"===e.pageType&&s.a.createElement(\"div\",{className:\"note-sample-display\"}))}),N=(a(18),function(e){return s.a.createElement(\"div\",{className:\"page-container\"},s.a.createElement(\"div\",{className:\"input-field\"},s.a.createElement(\"textarea\",{rows:\"8\",className:\"a\",type:\"text\",placeholder:\"Write your notes here...\"})),s.a.createElement(\"button\",{className:\"save btn btn-success\"},\"Save\"))}),g=function(e){function t(){var e;return Object(c.a)(this,t),(e=Object(r.a)(this,Object(m.a)(t).call(this))).state={displayNotes:!1},e.toggleDisplayNotes=e.toggleDisplayNotes.bind(Object(p.a)(Object(p.a)(e))),e}return Object(u.a)(t,e),Object(i.a)(t,[{key:\"toggleDisplayNotes\",value:function(){var e=this;this.setState(function(){return{displayNotes:!e.state.displayNotes}})}},{key:\"render\",value:function(){return s.a.createElement(\"div\",null,s.a.createElement(\"header\",null,s.a.createElement(\"div\",{className:\"a\"},s.a.createElement(\"h3\",null,\"Notes\")),s.a.createElement(\"div\",{className:\"b\"},s.a.createElement(d,{toggleDisplayNotes:this.toggleDisplayNotes,pageType:\"new\"}))),!this.state.displayNotes&&s.a.createElement(\"div\",{className:\"note-button-saved\"},s.a.createElement(d,{pageType:\"saved\"})),this.state.displayNotes&&s.a.createElement(\"div\",{className:\"note-page\"},s.a.createElement(N,null)))}}]),t}(n.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));o.a.render(s.a.createElement(g,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}],[[9,1,2]]]);","extractedComments":[]}