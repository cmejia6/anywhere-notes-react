{"version":3,"sources":["components/Header.js","components/NotePage.js","components/NotePageGroup.js","components/NoteMain.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","onClick","toggleDisplayNotes","NotePage","class","rows","NotePageGroup","NotesMain","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","displayNotes","bind","assertThisInitialized","_this2","setState","components_Header","components_NotePage","components_NotePageGroup","Component","Boolean","window","location","hostname","match","ReactDOM","render","NoteMain","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4TA8BeA,SA1BA,SAACC,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,IAAd,UAGFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UAAQE,QAASL,EAAMM,oBAAvB,UCYGC,SArBE,SAACP,GAChB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IAEfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,YAAUK,MAAM,eAAeC,KAAK,SAKtCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAW,4BAAnB,aC2BKM,SAtCO,WACpB,OAEET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,0BAINF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,0BAINF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,6BC6BGQ,qBA9Cb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAM,CACTC,cAAe,GAGjBR,EAAKN,mBAAqBM,EAAKN,mBAAmBe,KAAxBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAPjBA,oFAUO,IAAAW,EAAAR,KAClBA,KAAKS,SAAS,iBAAO,CAACJ,cAAgBG,EAAKJ,MAAMC,iDAKjD,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACXH,EAAAC,EAAAC,cAACsB,EAAD,CACEnB,mBAAoBS,KAAKT,sBAK7BS,KAAKI,MAAMC,cACXnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACbH,EAAAC,EAAAC,cAACuB,EAAD,QAKDX,KAAKI,MAAMC,cACZnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACbH,EAAAC,EAAAC,cAACwB,EAAD,eApCYC,cCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAAcC,SAASC,eAAe,SD2HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e7463d0e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport '../styles/Header.css'\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <div className=\"\">\r\n      <div className=\"row text-center\">\r\n          <div className=\"col p-3\">\r\n            <h3 className=\"\">Notes</h3>\r\n          </div>\r\n\r\n          <div className=\"col p-3\">\r\n            <button onClick={props.toggleDisplayNotes}>\r\n              +\r\n            </button>\r\n          </div>\r\n\r\n          {/*<div className=\"b\">\r\n              <NoteButton \r\n                toggleDisplayNotes={this.toggleDisplayNotes}\r\n                pageType={'new'}\r\n              />\r\n          </div>*/}\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nimport '../styles/NotePage.css'\r\n\r\nconst NotePage = (props) => {\r\n  return (\r\n    <div className=\"\">\r\n\r\n    <div className=\"row\">\r\n      <div className=\"col\">\r\n        <textarea class=\"form-control\" rows=\"10\"></textarea>\r\n      </div>\r\n    </div>\r\n    \r\n\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <button className =\"save col btn btn-success\">Save</button>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NotePage\r\n","import React from 'react'\r\nimport NotePage from './NotePage';\r\n\r\nimport '../styles/NotePageGroup.css'\r\n\r\n\r\nconst NotePageGroup = () => {\r\n  return (\r\n    \r\n    <div>\r\n      <div className=\"row\">\r\n          <div className=\"col note-page-container\">\r\n            <h3>NoteTitle</h3>\r\n            <p>Description</p>\r\n          </div>\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n          <div className=\"col note-page-container\">\r\n            <h3>NoteTitle</h3>\r\n            <p>Description</p>\r\n          </div>\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n          <div className=\"col note-page-container\">\r\n            <h3>NoteTitle</h3>\r\n            <p>Description</p>\r\n          </div>\r\n      </div>\r\n\r\n\r\n        {/*\r\n        <div className=\"row text-center\">\r\n              <div className=\"col p-4\">\r\n                {<NotePage />}\r\n              </div>\r\n        </div>\r\n        */}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NotePageGroup","import React, { Component } from 'react';\r\n\r\nimport Header from './Header';\r\nimport NotePage from './NotePage';\r\nimport NotePageGroup from './NotePageGroup';\r\n\r\nimport '../styles/NotesMain.css';\r\n\r\n\r\nclass NotesMain extends Component {\r\n  constructor(){\r\n      super()\r\n\r\n      this.state={\r\n        displayNotes : false,\r\n      }\r\n\r\n      this.toggleDisplayNotes = this.toggleDisplayNotes.bind(this)\r\n  }\r\n\r\n  toggleDisplayNotes(){\r\n    this.setState(() => ({displayNotes : !this.state.displayNotes}))\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n\r\n        <div className=\"\">\r\n            <Header \r\n              toggleDisplayNotes={this.toggleDisplayNotes}\r\n              />\r\n        </div>\r\n        \r\n        {\r\n          this.state.displayNotes &&\r\n          <div className=\"\">\r\n            <NotePage />\r\n          </div>\r\n        }\r\n\r\n        {\r\n          !this.state.displayNotes &&\r\n          <div className=\"\">\r\n            <NotePageGroup />\r\n          </div>\r\n        }\r\n\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NotesMain;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport NoteMain from './components/NoteMain';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<NoteMain />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}